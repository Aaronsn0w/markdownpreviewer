{"version":3,"sources":["defaultMarkdown.js","App.js","serviceWorker.js","index.js"],"names":["defaultMarkdown","marked","setOptions","breaks","sanitize","App","state","markdown","DM","handleChange","bind","parsed","e","va","target","value","this","setState","__html","className","id","rows","onChange","dangerouslySetInnerHTML","class","href","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAiDiBA,G,MAjDK,8wCCMtBC,IAAOC,WAAW,CAChBC,QAAQ,EACRC,UAAU,I,IAuEGC,E,YAnEb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,SAAUC,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBANF,E,0EASDE,GACX,IAAIC,EAAKD,EAAEE,OAAOC,MAClBC,KAAKC,UAAS,SAAAX,GAAK,sBACdA,EADc,CAEjBC,SAAUM,S,6BAIPD,GAEL,MAAO,CAAEM,OADCjB,IAAOW,M,+BAIT,IACAL,EAAaS,KAAKV,MAAlBC,SAER,OACE,yBAAKY,UAAU,OACb,yBAAKA,UAAU,iCACb,0DACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,+CACA,8BACEC,GAAG,SACHC,KAAK,KACLN,MAAOR,EACPe,SAAUN,KAAKP,gBAGnB,yBAAKU,UAAU,OACb,2CACA,yBACEC,GAAG,UACHG,wBAAyBP,KAAKL,OAAOJ,OAI7C,gCACE,uBACEiB,MAAM,gBAEN,uBACEC,KAAK,qBACLX,OAAO,SACPU,MAAM,uBACNE,IAAI,uBAJN,uB,GApDMC,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b3d4e92.chunk.js","sourcesContent":["const defaultMarkdown= \r\n`# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n  ### And here's some other cool stuff:\r\n    \r\n  Heres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n  \\`\\`\\`\r\n  // this is multi-line code:\r\n  \r\n  function anotherExample(firstLine, lastLine) {\r\n      if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n      return multiLineCode;\r\n    }\r\n}\r\n  \\`\\`\\`\r\n  \r\n  You can also make text **bold**... whoa!\r\n  Or _italic_.\r\n  Or... wait for it... **_both!_**\r\n  And feel free to go crazy ~~crossing stuff out~~.\r\n  \r\n  There's also [links](https://www.freecodecamp.com), and\r\n   > Block Quotes!\r\n   \r\n   And if you want to get really crazy, even tables:\r\n   \r\n   Wild Header | Crazy Header | Another Header?\r\n   ------------ | ------------- | ------------- \r\n   Your content can | be here, and it | can be here....\r\n   And here. | Okay. | I think we get it.\r\n   \r\n   - And of course there are lists.\r\n    - Some are bulleted.\r\n    - With different indentation levels.\r\n    - That look like this.\r\n    \r\n          \r\n    1. And there are numbererd lists too.\r\n  1. Use just 1s if you want! \r\n  1. But the list goes on...\r\n  - Even if you use dashes or asterisks.\r\n  * And last but not least, let's not forget embedded images:\r\n  \r\n  ![React Logo w/ Text](https://goo.gl/Umyytc)\r\n  `;\r\n\r\n  \r\n  export default defaultMarkdown ","import React from \"react\";\nimport marked from \"marked\";\nimport \"./App.css\";\n\nimport DM from \"./defaultMarkdown\";\n\nmarked.setOptions({\n  breaks: true,\n  sanitize: true\n});\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      markdown: DM\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.parsed = this.parsed.bind(this);\n  }\n\n  handleChange(e) {\n    let va = e.target.value;\n    this.setState(state => ({\n      ...state,\n      markdown: va\n    }));\n  }\n\n  parsed(e) {\n    let str = marked(e);\n    return { __html: str };\n  }\n\n  render() {\n    const { markdown } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid App-container\">\n          <h1>Markdown Converter to HTML</h1>\n          <div className=\"row w-100\">\n            <div className=\"col\">\n              <h3>Editor Markdown</h3>\n              <textarea\n                id=\"editor\"\n                rows=\"20\"\n                value={markdown}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"col\">\n              <h3>Viewer HTML</h3>\n              <div\n                id=\"preview\"\n                dangerouslySetInnerHTML={this.parsed(markdown)}\n              />\n            </div>\n          </div>\n        <footer>\n          <p\n            class=\"text-primary\"\n          >\n            <a\n              href=\"https:emiliort.com\"\n              target=\"_blank\"\n              class=\"text-decoration-none\"\n              rel=\"noopener noreferrer\"\n              >\n              By EmilioRT\n            </a>\n          </p>\n        </footer>\n              </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}